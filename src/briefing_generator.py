from jinja2 import Template
from typing import Dict, List
import markdown
from datetime import datetime

class BriefingGenerator:
    def __init__(self):
        self.template = self.load_template()
    
    def load_template(self) -> Template:
        """Load the briefing template"""
        template_str = """
# Pre-Meeting Intelligence Brief

**Generated:** {{ generation_time }}
**Meeting:** {{ meeting_title }}
**Date:** {{ meeting_date }}

---

## PROSPECT: {{ name }}, {{ title }}, {{ organization }}

### 🎯 KEY PITCH POINTS (5 Strategic Talking Points)

{% for point in pitch_points %}
- {{ point }}
{% endfor %}

### 📚 BACKGROUND & EDUCATION

{% for item in background.education %}
- {{ item }}
{% endfor %}

**Career Progression:**
{{ background.career_narrative }}

**Key Expertise:** {{ background.expertise_areas | join(', ') }}

### 🎤 RECENT SPEECHES/KEY HIGHLIGHTS

{% for activity in recent_activities[:3] %}
**{{ activity.date }}** - {{ activity.type }}
{{ activity.description }}
*Key Message: {{ activity.key_message }}*

{% endfor %}

### 🏢 DEPARTMENTS/PORTFOLIO

**Current Responsibilities:**
{% for resp in portfolio.responsibilities %}
- {{ resp }}
{% endfor %}

**Focus Areas:**
{% for area in portfolio.focus_areas %}
- {{ area }}
{% endfor %}

**Influence Scope:** {{ portfolio.influence_scope }}

### 🚀 MAJOR INITIATIVES

{% for initiative in initiatives %}
**{{ initiative.name }}**
- Status: {{ initiative.status }}
- Impact: {{ initiative.impact }}
- Our Alignment: {{ initiative.our_alignment }}

{% endfor %}

### 🤝 OUR CONNECTION OPPORTUNITIES

{% if connections.education %}
**Educational Connections:**
{% for conn in connections.education %}
- {{ conn }}
{% endfor %}
{% endif %}

{% if connections.professional %}
**Professional Network:**
{% for conn in connections.professional %}
- {{ conn }}
{% endfor %}
{% endif %}

{% if connections.regional %}
**Regional Alignment:**
{% for conn in connections.regional %}
- {{ conn }}
{% endfor %}
{% endif %}

### 💡 STRATEGIC RECOMMENDATIONS

1. **Opening Approach:** {{ recommendations.opening }}
2. **Key Value Prop:** {{ recommendations.value_prop }}
3. **Partnership Angle:** {{ recommendations.partnership }}
4. **Follow-up Strategy:** {{ recommendations.follow_up }}

### 📎 RELEVANT CASE STUDIES

{% for case in case_studies %}
- **{{ case.client }}**: {{ case.description }} - *Relevance: {{ case.relevance }}*
{% endfor %}

---

**Confidence Score:** {{ confidence_score }}/100
**Data Sources:** {{ sources | join(', ') }}
**Last Updated:** {{ last_updated }}

---

*This briefing was automatically generated by the AI Meeting Intelligence System*
        """
        return Template(template_str)
    
    def generate_briefing(self, analysis_data: Dict, meeting_data: Dict) -> str:
        """Generate the final briefing document"""
        
        # Prepare template data
        template_data = {
            'generation_time': datetime.now().strftime('%Y-%m-%d %H:%M'),
            'meeting_title': meeting_data['title'],
            'meeting_date': meeting_data['start_time'],
            'name': analysis_data['name'],
            'title': analysis_data['title'],
            'organization': analysis_data['organization'],
            'pitch_points': analysis_data['pitch_points'],
            'background': analysis_data['background'],
            'recent_activities': analysis_data['recent_activities'],
            'portfolio': analysis_data['portfolio'],
            'initiatives': analysis_data['initiatives'],
            'connections': analysis_data['connections'],
            'recommendations': self.generate_recommendations(analysis_data),
            'case_studies': self.match_case_studies(analysis_data),
            'confidence_score': self.calculate_confidence(analysis_data),
            'sources': analysis_data.get('sources', []),
            'last_updated': datetime.now().strftime('%Y-%m-%d %H:%M')
        }
        
        # Generate HTML and text versions
        briefing_md = self.template.render(**template_data)
        briefing_html = markdown.markdown(briefing_md)
        
        return {
            'markdown': briefing_md,
            'html': briefing_html,
            'plain_text': self.to_plain_text(briefing_md)
        }
    
    def generate_recommendations(self, analysis: Dict) -> Dict:
        """Generate strategic recommendations"""
        # This would use AI to generate specific recommendations
        return {
            'opening': f"Reference their recent work on {analysis['initiatives'][0]['name'] if analysis['initiatives'] else 'digital transformation'}",
            'value_prop': "Position our AI solutions as accelerators for their current initiatives",
            'partnership': "Propose a pilot project aligned with their immediate priorities",
            'follow_up': "Share specific case study within 24 hours of meeting"
        }
    
    def match_case_studies(self, analysis: Dict) -> List[Dict]:
        """Match relevant case studies from database"""
        # This would query your case studies database
        # For demo, returning sample data
        return [
            {
                'client': 'State Government Digital Initiative',
                'description': 'Implemented AI-powered citizen services platform',
                'relevance': 'Similar scope and government context'
            },
            {
                'client': 'Smart City Project',
                'description': 'Deployed intelligent traffic management system',
                'relevance': 'Aligns with urban development focus'
            }
        ]
    
    def calculate_confidence(self, analysis: Dict) -> int:
        """Calculate confidence score based on data completeness"""
        scores = {
            'has_education': 15,
            'has_recent_activities': 20,
            'has_portfolio': 20,
            'has_initiatives': 20,
            'has_connections': 15,
            'multiple_sources': 10
        }
        
        total = 0
        if analysis.get('background', {}).get('education'):
            total += scores['has_education']
        if len(analysis.get('recent_activities', [])) > 0:
            total += scores['has_recent_activities']
        if analysis.get('portfolio'):
            total += scores['has_portfolio']
        if len(analysis.get('initiatives', [])) > 0:
            total += scores['has_initiatives']
        if analysis.get('connections'):
            total += scores['has_connections']
        if len(analysis.get('sources', [])) > 2:
            total += scores['multiple_sources']
        
        return total
    
    def to_plain_text(self, markdown_text: str) -> str:
        """Convert markdown to plain text"""
        # Remove markdown formatting
        text = re.sub(r'#{1,6}\s*', '', markdown_text)  # Remove headers
        text = re.sub(r'\*\*([^*]+)\*\*', r'\1', text)  # Remove bold
        text = re.sub(r'\*([^*]+)\*', r'\1', text)  # Remove italic
        text = re.sub(r'\[([^\]]+)\]\([^)]+\)', r'\1', text)  # Remove links
        return text